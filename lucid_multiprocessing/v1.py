# Multiprocessing is a package in python that supports the ability to spawn
# processes that make use of python API and this is similar to threading module
# It allow us to write concurrent programs and the way that allows us to do this
# is it sidesteps something know as GIL (Global Intrepreter Lock). It is a mechanism
# that essentially assures that python code is going to execute one thread at a time.

# Eg: We will create a simple square function.

# # CASE 1 : Normal functing and calling (only one processor will process all the task)
# def square(num):
#     print('Square of {num} is {result}'.format(num=num, result=num**2))

# if __name__ == '__main__':
#     numbers = [1, 3, 5, 7]
#     for number in numbers:
#         square(number)
# # =======================================================================

# # CASE 2 : creating processes
import os
from multiprocessing import Process, current_process
# Process - is a class that allows us to create and run processes.
# current_process - it helps us to access and have a look at the current processes running on our machine.
# Let's see now what is required to distribute this task to multiple processors

def square(num):
    # After process.start() come here...
    # To get the current process id which is associated with it. what we'll do.
    process_id = os.getpid() # It will help us to get the process id of thi current function assigned by the operating system.
    print('Process ID : {}'.format(process_id))
    print('Square of {num} is {result}'.format(num=num, result=num**2))

    # Here process_id is the process number that is going to be generated by the OS.
    # Then there is a current_process function it helps us to access the processes. It's going to assign from 1 to n to the process.
    process_name = current_process().name
    print('process name : ', process_name)
    print('-------------------')


if __name__ == '__main__':
    numbers = [1, 2, 3, 4, 5, 6, 7, 8]

    # Now we'll create a for loop where we'll initialize the process then we are going to store each of them in list and then we'll start the processes.
    processes = []
    for number in numbers:
        process = Process(target=square, args=(number,))
        # target - it takes the function that we want.
        # args - is the parameters that the target function takes.
        # Once we created our process objects now we'll add these processes to our list that we created above.
        processes.append(process)
        # Now the way we tell python to start the process is using start method
        # Processes are spawned by creating a Process object and then calling its start() method.
        process.start()

        # Now we'll go up to the square function and we are going to print out some of the information that corresponds to the process that we are running.
        # Note: this is not going to get executed in sequence it may vary
